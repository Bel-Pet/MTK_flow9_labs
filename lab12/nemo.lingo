prog = ws decl*:d stat:b { NmProg(:d, :b)};
decl = "var" ws id:v ":" ws type:t ";" ws { NmDecl(:v, :t) };

type  = int | array;
int   = "int" ws { NmIntType() };
array = "[" ws type:t "]" ws { NmArrType(:t) };

stat   = test | seq | choice | loop | assign | ifelse | while;
test   = ws "(" ws expr:e1 cond$s ws expr:e2 ")" ws "?" ws { NmTest($s, :e1, :e2) };
seq    = ws "{" ws stat:s1 ";" ws stat:s2 seqs*:ss "}" ws { createSeq(:s1, :s2, :ss) };
seqs   = ws ";" ws stat;
choice = ws "{" ws stat:s1 "U" ws stat:s2 chs*:ss "}" ws { createChoice(:s1, :s2, :ss) };
chs    = ws "U" ws stat;

loop   = ws "{" ws stat:s1 ws "}*" ws { NmLoop(:s1) };

assign = id:v ":=" ws expr:e { NmAssign(:v, :e) };
ifelse = ws "if"    ws "(" ws expr:e1 cond$s ws expr:e2 ")" ws stat:s1 "else" ws stat:s2 { createIfElse($s, :e1, :e2, :s1, :s2) };
while  = ws "while" ws "(" ws expr:e1 cond$s ws expr:e2 ")" ws stat:s1 { createWhile($s, :e1, :e2, :s1) };

expr   = const | bin_op | un_op | update | apply | var;
const  = digit+ $s ws { NmInt(s2i($s)) };
bin_op = "(" ws expr:l ("+"|"*"|"/"|"-"|"%") $s ws expr:r ")" ws { NmBinOp($s, :l, :r) };
un_op  = "-" $s ws expr:e { NmUnOp($s, :e) };
apply  = "app" ws "(" ws expr:a "," ws expr:i ")" ws { NmApp(:a, :i) };
update = "upd" ws "(" ws expr:a "," ws expr:i "," ws expr:v ")" ws { NmUpd(:a, :i, :v) };
arrval = "," ws expr;

var    = id:v { NmVar(:v) };
cond   = "!=" | "==" | "<=" | ">=" | "<" | ">" ;

id = letter+ $s ws { $s };
letter = 'a'-'z';
digit  = '0'-'9';
ws = (' ' | '\t' | '\n' | '\r')*;
